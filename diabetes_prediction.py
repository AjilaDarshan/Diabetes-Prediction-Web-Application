# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vLpNltF5TCShtpJgF0VYe9CTRlg1Ou30
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabetes_dataset = pd.read_csv('/content/diabetes.csv')

diabetes_dataset.head()

diabetes_dataset.tail()

diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

X = diabetes_dataset.drop(columns = 'Outcome', axis = 1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

scaler = StandardScaler()
scaler.fit(X)
standard_data = scaler.transform(X)

print(standard_data)

X = standard_data
Y = diabetes_dataset['Outcome']

X_train, X_test , Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state = 2)

print(X_train.shape, X_test.shape)

classifer = svm.SVC(kernel='linear')
classifer.fit(X_train, Y_train)

X_train_predict = classifer.predict(X_train)
training_data_accuracy = accuracy_score(X_train_predict, Y_train)
print('Accuracy Score',training_data_accuracy)

X_test_predict = classifer.predict(X_test)
test_data_accuracy = accuracy_score(X_test_predict, Y_test)
print('Accuracy Score',test_data_accuracy)

input_data = (4,110,92,0,0,37.6,0.191,30)
input_np_data = np.asarray(input_data)
input_data_re = input_np_data.reshape(1,-1)

std_data = scaler.transform(input_data_re)
print(std_data)

prediction = classifer.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print("The person is non-Diabetes")
else:
  print("The Person is Diabetes")

import pickle

filename = 'trained_model.sav'
pickle.dump(classifer,open(filename, 'wb'))

loaded_model = pickle.load(open('trained_model.sav', 'rb'))

input_data = (5,116,72,19,175,25.8,0.587,51)
input_np_data = np.asarray(input_data)
input_data_re = input_np_data.reshape(1,-1)

std_data = scaler.transform(input_data_re)
print(std_data)

prediction = loaded_model.predict(std_data)
print(prediction)

if (prediction[0] == 0):
  print("The person is non-Diabetes")
else:
  print("The Person is Diabetes")